#correr repo
docker run contenedor 

#run docker cambiando nombre
docker run --name nombrecontenedor contenedor

#listar contenedores 
docker ps -a

#eliminar todos los contenedores
docker container prune

#eliminar contenedores
docker rm nombrecontenedor

#eliminar contenedor forzandolo
docker rm -f nombreContenedor

#cambiar nombrecontenedor
docker rename oldname newname

#docker corre por defecto el main process del contenedor, si no corre el proceso principal se apaga
docker run ubuntu --->>> se inicializa pero se apaga solo ya que no corre el main process

#contenedrr modo interactivo
docker -it container (regularmente SO)

#cambiando el proceso principal para que no se deshabilite automaticamente el contenedor
sudo docker run --name alwaysup2 -d ubuntu tail -f /dev/null

#correr bash en un contenedor
sudo docker exec -it nombrecontenedor bash

#inspeccionar
#encontrar encontrar detalles de contenedor
sudo docker inspect nombreContenedor


#encotrar el ID del proceso corriendo de contenedor filtrado por nombre
 sudo docker inspect --format '{{.State.Pid}}' nombrecontenedor

#contenedor nginx
sudo docker run -d --name namecontainer nginx

#docker network
sudo docker network ls

#detener contenedor
sudo docker stop namecontainer

#correr contenedor nginx  -d detach(segundo plano) -p publish(puerto)
sudo docker run --name proxy -d -p 2220:80 nginx

#consultar los logs
sudo docker logs namecontainer

#consultar logs con terminal escuchando -f follow
sudo docker logs -f namecontainer

#consulta logs con filtro grep
sudo docker logs nombreContenedor | grep plabraDeBusqueda

#consultar ultimos 10 logs
sudo docker logs --tail 10 -f namecontainer

#entrar a bash de base de datos 
sudo docker exec -it namecontainer bash

--->>BIND MOUNTS<<-------
#los bind mounts perminten sacar o ingresar informacion en los contenedores
#guardar archivos fuera del contenedor la -v bindmount bash puede ser reemplazado por mongo
#sudo docker run -d --name db -v /home/molguin/docker/mongodata:/data/db mongo

sudo docker run -d -name namecontainer -v /ruta/pc/local:/ruta/contenedor IMAGE

---->>>volumenes<<<<<------
#nos permiten utilizar una parte del disco donde esta instalado docker pero a la que solo tiene acceso Docker
#listar volumenes
sudo docker volume ls

#eliminar volumenes sin usar
sudo docker volume prune

#crear volumen para guardar datos de contenedores
sudo docker volume create namevolume

#crear container redirigiendo los datos a un volumen de docker
 sudo docker run -d --name nombreContenedor --mount src=nombreVolumen,dst=/directorio/de/contenedor IMAGE
 --mount = para redirigir los datos al volumen
 
#Copiar archivos del sistema a contenedor
sudo docker cp nombreArchivo nombreContenedor:/ruta/de/destino/en/contenedor/nuevo.nombre 

#extraer archivos de un contenedor
sudo docker cp nombreContenedor:/ruta/en/contenedor nombredeCarpetaDestino

--->>IMAGES<<-------
#consultar imagenes
sudo docker image ls

#eliminar imagen
sudo docker rmi nombreImagen

#crear una imagen a partir de un Dockerfile
sudo docker build -t ubuntu:platzi .

build= construciion de imagen
-t = tag para la imagen
ubuntu:platzi = IMAGE:VERSION
. = directorio actual

#crear un nuevo tag de una IMAGE
sudo docker tag ubuntu:platzi moises/ubuntu:platzi

--->>NETWORK<<-------
#VER REDES
sudo docker network ls

#crear una red
#sudo docker network create --attachable nombreRed
sudo docker network create --attachable platzinet
--atachable= que contenedores se puedan unir a la red

#conectarse a una red de docker
#sudo docker network connect nombreRed nombreContenedor
sudo docker network connect platzinet db

#conectar mongo con la app de prueba
sudo docker run -d --name app -p 3000:3000 --env MONGO_URL=mongodb://db:27017/test platziapp

--->>NGINX<<-------
#Crear contenedor de nginx con dist
sudo docker run -d -p 9090:80 -v /home/molguin/dist/rents/:/usr/share/nginx/html nginx:alpine

--->>DOCKER-COMPOSE<<-------
#en linux instalar docker compose es un binario
#https://docs.docker.com/compose/install/
#agregrÃ© el binario como alias para usarlo como docker-compose
#alias docker-compose="sudo /usr/local/bin/docker-compose"

#ejecutar un docker-compose
docker-compose up -d
#-d= dettach "que se ejecute en segundo plano sin perder la consola"

#EJECUTAR COMPOSE CON ENVIROMENTS
docker-compose --env-file ./db.env up

#EJECUTAR COMPOSE CON ENVIROMENTS Y OTRO NOMBRE COMPOSE
docker-compose -f nombreCompose.yml --env-file ./db.env up

--->>POSTGRES<<----------------

#postgresql
#respaldo de base de datos
#docker exec container pg_dumpall -U usuario > /ruta/destino/nombrearchivo.sql
docker exec a1c0bfaf7f34 pg_dumpall -U postgres > /home/back-up/difusionDatos.sql

#restaurar base de datos
#leer archivo de back-up | docker exec -i nombreContenedor psql -U usuario
cat /home/back-up/difusionDatos.sql | docker exec -i 40b5afca4829 psql -U postgres

